[{"C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\index.js":"1","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\App.js":"2","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\store.js":"3","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\actions\\auth.js":"4","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\utils\\setAuthToken.js":"5","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\components\\auth\\LoginAdmin.js":"6","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\components\\layouts\\Alert.js":"7","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\components\\auth\\LoginUser.js":"8","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\components\\layouts\\Landing.js":"9","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\components\\routing\\PrivateRoute.js":"10","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\components\\dashboard\\ControlPanel.js":"11","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\components\\auth\\Register.js":"12","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\components\\game\\Game.js":"13","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\actions\\alert.js":"14","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\actions\\types.js":"15","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\utils\\ClientUtils.js":"16","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\components\\dashboard\\GameDashboard.js":"17","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\actions\\dashboard.js":"18","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\components\\game\\Phase.js":"19","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\actions\\user.js":"20","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\reducers\\index.js":"21","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\components\\dashboard\\PlayersTable.js":"22","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\components\\game\\Video.js":"23","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\components\\game\\Groups.js":"24","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\components\\game\\Answer.js":"25","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\components\\game\\Bars.js":"26","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\components\\game\\Top3.js":"27","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\components\\game\\Poll.js":"28","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\components\\game\\WebcamCapture.js":"29","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\components\\game\\Question.js":"30","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\reducers\\alert.js":"31","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\reducers\\auth.js":"32","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\reducers\\user.js":"33","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\reducers\\dashboard.js":"34","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\components\\game\\SpotlightCheck.js":"35","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\components\\game\\windeoResize.js":"36","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\components\\game\\Welcome.js":"37","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\components\\game\\GoodBye.js":"38","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\localStorage.js.js":"39"},{"size":207,"mtime":1608038562091,"results":"40","hashOfConfig":"41"},{"size":1733,"mtime":1614078594691,"results":"42","hashOfConfig":"41"},{"size":492,"mtime":1614156188616,"results":"43","hashOfConfig":"41"},{"size":2188,"mtime":1608289045731,"results":"44","hashOfConfig":"41"},{"size":251,"mtime":1607981746163,"results":"45","hashOfConfig":"41"},{"size":1997,"mtime":1608215391155,"results":"46","hashOfConfig":"41"},{"size":506,"mtime":1607981746148,"results":"47","hashOfConfig":"41"},{"size":3127,"mtime":1614156188606,"results":"48","hashOfConfig":"41"},{"size":1025,"mtime":1614078594711,"results":"49","hashOfConfig":"41"},{"size":667,"mtime":1607981746149,"results":"50","hashOfConfig":"41"},{"size":1881,"mtime":1614078594703,"results":"51","hashOfConfig":"41"},{"size":2921,"mtime":1607981746146,"results":"52","hashOfConfig":"41"},{"size":1362,"mtime":1614156188608,"results":"53","hashOfConfig":"41"},{"size":357,"mtime":1607981746133,"results":"54","hashOfConfig":"41"},{"size":806,"mtime":1610032615533,"results":"55","hashOfConfig":"41"},{"size":251,"mtime":1614156188617,"results":"56","hashOfConfig":"41"},{"size":2136,"mtime":1614078594704,"results":"57","hashOfConfig":"41"},{"size":1699,"mtime":1614078594691,"results":"58","hashOfConfig":"41"},{"size":1189,"mtime":1614156188609,"results":"59","hashOfConfig":"41"},{"size":1790,"mtime":1614078594693,"results":"60","hashOfConfig":"41"},{"size":247,"mtime":1608215391159,"results":"61","hashOfConfig":"41"},{"size":1810,"mtime":1613904609616,"results":"62","hashOfConfig":"41"},{"size":916,"mtime":1614078594709,"results":"63","hashOfConfig":"41"},{"size":5911,"mtime":1614180227681,"results":"64","hashOfConfig":"41"},{"size":88,"mtime":1608145598785,"results":"65","hashOfConfig":"41"},{"size":6763,"mtime":1614162410930,"results":"66","hashOfConfig":"41"},{"size":6912,"mtime":1614180375807,"results":"67","hashOfConfig":"41"},{"size":86,"mtime":1608145598786,"results":"68","hashOfConfig":"41"},{"size":4891,"mtime":1614078594710,"results":"69","hashOfConfig":"41"},{"size":21582,"mtime":1614156188610,"results":"70","hashOfConfig":"41"},{"size":397,"mtime":1607981746158,"results":"71","hashOfConfig":"41"},{"size":1204,"mtime":1608215391159,"results":"72","hashOfConfig":"41"},{"size":1156,"mtime":1614156188615,"results":"73","hashOfConfig":"41"},{"size":706,"mtime":1614078594716,"results":"74","hashOfConfig":"41"},{"size":5274,"mtime":1614179736126,"results":"75","hashOfConfig":"41"},{"size":617,"mtime":1609004489040,"results":"76","hashOfConfig":"41"},{"size":1465,"mtime":1614078594711,"results":"77","hashOfConfig":"41"},{"size":688,"mtime":1614078594705,"results":"78","hashOfConfig":"41"},{"size":536,"mtime":1614156188614,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"1k5eq83",{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"82"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"82"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"82"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"82"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"82"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"82"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"82"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"82"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"82"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"82"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"82"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"82"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"82"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"82"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"82"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\index.js",[],["174","175"],"C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\App.js",[],"C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\store.js",["176","177"],"import { createStore, applyMiddleware } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\nimport { loadState, saveState } from \"./localStorage.js\";\r\n\r\n// const initialState = loadState();\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\actions\\auth.js",["178"],"import axios from \"axios\";\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport { setAlert } from \"./alert\";\r\nimport { httpPath } from \"../utils/ClientUtils\";\r\n\r\nimport {\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL,\r\n  ADMIN_LOADED,\r\n  AUTH_ERROR,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGOUT,\r\n} from \"./types\";\r\n\r\n//Load Admin\r\nexport const loadAdmin = () => async (dispatch) => {\r\n  if (localStorage.token) {\r\n    setAuthToken(localStorage.token);\r\n  }\r\n\r\n  try {\r\n    console.log(\"1\");\r\n    const res = await axios.get(\"/api/auth\");\r\n    dispatch({\r\n      type: ADMIN_LOADED,\r\n      payload: res.data,\r\n    });\r\n  } catch (err) {\r\n    console.log(err);\r\n    dispatch({\r\n      type: AUTH_ERROR,\r\n    });\r\n  }\r\n};\r\n\r\n// actions/auth.js must have same name as reducers/auth.js\r\n//Register Admin\r\nexport const register = ({ name, email, password }) => async (dispatch) => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n\r\n  const body = JSON.stringify({ name, email, password });\r\n\r\n  try {\r\n    const res = await axios.post(\"/api/admin\", body, config);\r\n\r\n    dispatch({\r\n      type: REGISTER_SUCCESS,\r\n      payload: res.data,\r\n    });\r\n    dispatch(loadAdmin());\r\n  } catch (err) {\r\n    const errors = err;\r\n\r\n    if (errors) {\r\n      // errors.foreach((error) => dispatch(setAlert(error.msg, \"danger\")));\r\n    }\r\n\r\n    dispatch({\r\n      type: REGISTER_FAIL,\r\n    });\r\n  }\r\n};\r\n//Login Admin\r\nexport const login = (email, password) => async (dispatch) => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n\r\n  const body = JSON.stringify({ email, password });\r\n\r\n  try {\r\n    const res = await axios.post(\"/api/auth\", body, config);\r\n\r\n    dispatch({\r\n      type: LOGIN_SUCCESS,\r\n      payload: res.data,\r\n    });\r\n    dispatch(loadAdmin());\r\n  } catch (err) {\r\n    const errors = err.response.data.errors;\r\n\r\n    if (errors) {\r\n      errors.forEach((error) => dispatch(setAlert(error.msg, \"danger\")));\r\n    }\r\n\r\n    dispatch({\r\n      type: LOGIN_FAIL,\r\n    });\r\n  }\r\n};\r\n\r\n//LOGOUT Admin\r\nexport const logout = () => (dispatch) => {\r\n  dispatch({\r\n    type: LOGOUT,\r\n  });\r\n};\r\n\r\n//StartGame\r\n","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\utils\\setAuthToken.js",[],"C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\components\\auth\\LoginAdmin.js",[],"C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\components\\layouts\\Alert.js",[],"C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\components\\auth\\LoginUser.js",["179","180","181"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { login } from \"../../actions/user\";\r\nimport { DialogTitle, Typography, TextField, Button } from \"@material-ui/core\";\r\nimport { loadState } from \"../../localStorage.js\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport \"../layouts/css/LoginUser.css\";\r\nconst LoginUser = ({ login, isAuthenticated, questions }) => {\r\n  const [formData, setFormData] = useState({\r\n    name: \"\",\r\n    keygame: \"\",\r\n  });\r\n\r\n  // useEffect(() => {\r\n  //   var load = loadState();\r\n  //   console.log(load);\r\n\r\n  //   if (load != undefined) {\r\n  //     login({ name: load.name, keygame: load.keygame });\r\n  //   }\r\n  // });\r\n\r\n  const onChange = (e) =>\r\n    setFormData({ ...formData, [e.target.name]: e.target.value });\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    console.log(\"key game is \" + keygame);\r\n    login({ name, keygame });\r\n  };\r\n\r\n  if (isAuthenticated) {\r\n    return <Redirect to=\"/game\" />;\r\n  }\r\n\r\n  const { name, keygame } = formData;\r\n  return (\r\n    <Fragment>\r\n      <div className=\"flex-container-user-main \">\r\n        <Typography variant=\"h2\">ברוכים הבאים </Typography>\r\n        <Typography style={{ marginTop: \"2%\" }} variant=\"h8\">\r\n          בשלב הראשון, אנא מלאו את שמכם המלא ואת קוד המשחק הניתן לכם על ידי\r\n          המנחה{\" \"}\r\n        </Typography>\r\n\r\n        {/* <div className='flex-container-user-row'>\r\n          <div className='flex-container-user-form'>\r\n            <div className='flex-container-user-row'>\r\n              <div className='flex-container-user-form'> */}\r\n        <form onSubmit={(e) => onSubmit(e)}>\r\n          <div style={{ marginTop: \"10%\" }}>\r\n            <TextField\r\n              className=\"formField\"\r\n              type=\"text\"\r\n              placeholder=\"שם מלא\"\r\n              name=\"name\"\r\n              value={name}\r\n              onChange={(e) => onChange(e)}\r\n              required\r\n            />\r\n          </div>\r\n\r\n          <div style={{ marginTop: \"10%\" }}>\r\n            <TextField\r\n              className=\"formField\"\r\n              type=\"text\"\r\n              placeholder=\"קוד משחק\"\r\n              name=\"keygame\"\r\n              textAlign=\"middle\"\r\n              value={keygame}\r\n              onChange={(e) => onChange(e)}\r\n              required\r\n            />\r\n          </div>\r\n\r\n          <div style={{ marginTop: \"15%\" }}>\r\n            <Button id=\"testbutton\" type=\"submit\" color=\"primary\">\r\n              היכנס/י\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n      {/* </div>\r\n          </div>\r\n        </div>\r\n      </div> */}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nLoginUser.propTypes = {\r\n  isAuthenticated: PropTypes.bool,\r\n  questions: PropTypes.array,\r\n  login: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isAuthenticated: state.user.isAuthenticated,\r\n  questions: state.user.questions,\r\n});\r\n\r\nexport default connect(mapStateToProps, { login })(LoginUser);\r\n","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\components\\layouts\\Landing.js",[],"C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\components\\routing\\PrivateRoute.js",[],"C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\components\\dashboard\\ControlPanel.js",["182"],"import React, { useState } from 'react';\r\nimport { TextField, Button } from '@material-ui/core';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport '../../App.css';\r\nimport { connect } from 'react-redux';\r\nimport { logout } from '../../actions/auth';\r\nimport { startGame } from '../../actions/dashboard';\r\nimport GameDashboard from './GameDashboard';\r\n\r\nconst ControlPanel = ({ name, logout, startGame }) => {\r\n\tconst [gameStarted, setGameStarted] = useState(false);\r\n\tconst [numOfPlayers, setPlayers] = useState(40);\r\n\r\n\tconst onChange = (e) => setPlayers(e.target.value);\r\n\tconst onSubmit = async (e) => {\r\n\t\tif (numOfPlayers === '') {\r\n\t\t\talert('Please enter number');\r\n\t\t} else {\r\n\t\t\tsetGameStarted(true);\r\n\t\t\tstartGame(numOfPlayers, name);\r\n\t\t}\r\n\t};\r\n\r\n\t// const onClick = () => {\r\n\t// \tsetGameStarted(true);\r\n\t// \tstartGame();\r\n\t// };\r\n\r\n\tif (gameStarted) return <GameDashboard />;\r\n\r\n\treturn (\r\n\t\t<span>\r\n\t\t\t<h1 className='aaa'> Welcome to the Control Panel {name} </h1>\r\n\t\t\t<button onClick={logout}>LogOut</button>\r\n\t\t\t<form className='form' onSubmit={(e) => onSubmit(e)}>\r\n\t\t\t\t<div className='flex-container-user-col'>\r\n\t\t\t\t\t<div style={{ display: 'flex', flexDirection: 'row' }}>\r\n\t\t\t\t\t\t<h4>Enter Num of Players:</h4>\r\n\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\ttype='number'\r\n\t\t\t\t\t\t\tplaceholder='num of players'\r\n\t\t\t\t\t\t\tname='numOfPlayers'\r\n\t\t\t\t\t\t\tstyle={{ padding: 20 }}\r\n\t\t\t\t\t\t\tvalue={numOfPlayers}\r\n\t\t\t\t\t\t\tonChange={(e) => onChange(e)}\r\n\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<button onClick={onSubmit}>StartGame1</button>\r\n\t\t\t\t</div>\r\n\t\t\t</form>\r\n\t\t</span>\r\n\t);\r\n};\r\nControlPanel.propTypes = {\r\n\tlogout: PropTypes.func.isRequired,\r\n\tname: PropTypes.string,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n\tisAuthenticated: state.auth.isAuthenticated, //TODO:: DELETE THIS\r\n\tname: state.auth.name,\r\n});\r\n\r\nexport default connect(mapStateToProps, { logout, startGame })(ControlPanel);\r\n","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\components\\auth\\Register.js",[],"C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\components\\game\\Game.js",["183","184","185","186"],"import React, { Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport Phase from \"./Phase\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport \"../layouts/css/Game.css\";\r\nimport scoreLogo from \"../../assets/bottomBar/score.svg\";\r\nimport playerNumLogo from \"../../assets/bottomBar/playerNum.svg\";\r\nimport groupLogo from \"../../assets/bottomBar/group.svg\";\r\nconst Game = ({ score, name, group }) => {\r\n  return (\r\n    <div>\r\n      <div className='game-fullscreen'>\r\n        <Phase />\r\n      </div>\r\n      <div className='bottomBar'>\r\n        <img className='game-icon' src={scoreLogo} alt='scoreLogo' />\r\n        <h1 className='game-text'>{score}</h1>\r\n        <img className='game-icon' src={playerNumLogo} />\r\n        <h1 className='game-text'>{name}</h1>\r\n        <img className='game-icon' src={groupLogo} />\r\n        <h1 className='game-text'>{group}</h1>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nGame.propTypes = {\r\n  isAuthenticated: PropTypes.bool,\r\n  score: PropTypes.number,\r\n  name: PropTypes.number,\r\n  group: PropTypes.string,\r\n  login: PropTypes.func,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  score: state.user.userState.score,\r\n  name: state.user.name,\r\n  group: state.user.group,\r\n  isAuthenticated: state.user.isAuthenticated,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(Game);\r\n","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\actions\\alert.js",[],"C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\actions\\types.js",[],"C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\utils\\ClientUtils.js",[],"C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\components\\dashboard\\GameDashboard.js",[],"C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\actions\\dashboard.js",["187"],"import {\r\n\tKEYGAME_SUCCESS,\r\n\tKEYGAME_FAIL,\r\n\tPHASE,\r\n\tCREATE_NEW_GAME_INSTANCE,\r\n} from './types';\r\nimport { w3cwebsocket as W3CWebSocket } from 'websocket';\r\nimport { PATH, ServerPORT } from '../utils/ClientUtils';\r\nvar client;\r\n//Start Game Admin\r\nexport const startGame = (numOfPlayers = 40, name) => async (dispatch) => {\r\n\ttry {\r\n\t\tclient = new W3CWebSocket(PATH + ':' + ServerPORT);\r\n\r\n\t\tclient.onopen = () => {\r\n\t\t\tclient.send(\r\n\t\t\t\tJSON.stringify({\r\n\t\t\t\t\ttype: CREATE_NEW_GAME_INSTANCE,\r\n\t\t\t\t\tnumOfPlayers: numOfPlayers,\r\n\t\t\t\t\tname: name,\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t};\r\n\t\t// get The Game Properties\r\n\t\tclient.onmessage = (message) => {\r\n\t\t\tconst dataFromServer = JSON.parse(message.data);\r\n\t\t\tconst type = dataFromServer.type;\r\n\t\t\tif (dataFromServer) {\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: type,\r\n\t\t\t\t\tpayload: dataFromServer,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t};\r\n\t} catch (err) {\r\n\t\tconsole.log(err.message);\r\n\t\tdispatch({\r\n\t\t\ttype: KEYGAME_FAIL, //TODO:: change to more reasonable Error\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport const ChangePhase = (phaseName = '') => async (dispatch) => {\r\n\ttry {\r\n\t\tclient.send(\r\n\t\t\tJSON.stringify({\r\n\t\t\t\ttype: PHASE, //TODO::need to write func in server.\r\n\t\t\t\tphaseName: phaseName,\r\n\t\t\t})\r\n\t\t);\r\n\t} catch (err) {\r\n\t\tconsole.log(err.message);\r\n\t\tdispatch({\r\n\t\t\ttype: KEYGAME_FAIL, //TODO:: change to more reasonable Error\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport const resumePause = (resumeOrPause) => async (dispatch) => {\r\n\tconsole.log(resumeOrPause);\r\n\ttry {\r\n\t\tclient.send(\r\n\t\t\tJSON.stringify({\r\n\t\t\t\ttype: resumeOrPause, //TODO::need to write func in server.\r\n\t\t\t})\r\n\t\t);\r\n\t} catch (err) {\r\n\t\tconsole.log(err.message);\r\n\t\tdispatch({\r\n\t\t\ttype: KEYGAME_FAIL, //TODO:: change to more reasonable Error\r\n\t\t});\r\n\t}\r\n};\r\n","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\components\\game\\Phase.js",["188","189","190"],"import React, { Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { login } from \"../../actions/user\";\r\nimport Question from \"./Question\";\r\nimport Bars from \"./Bars\";\r\nimport { Answer } from \"./Answer\";\r\nimport Video from \"./Video\";\r\nimport Top3 from \"./Top3\";\r\nimport { Poll } from \"./Poll\";\r\nimport Groups from \"./Groups\";\r\nimport WebcamCapture from \"./WebcamCapture\";\r\nimport Welcome from \"./Welcome\";\r\nimport Goodbye from \"./GoodBye\";\r\n\r\nconst Phase = ({ phase }) => {\r\n  switch (phase) {\r\n    case \"Question\":\r\n      return <Question />;\r\n    case \"answer\":\r\n      return <Answer />;\r\n    case \"video\":\r\n      return <Video />;\r\n    case \"poll\":\r\n      return <Poll />;\r\n    case \"top3\":\r\n      return <Top3 />;\r\n    case \"Group\":\r\n      return <Groups />;\r\n    case \"bars\":\r\n      return <Bars />;\r\n    case \"webCam\":\r\n      return <WebcamCapture />;\r\n    default:\r\n      //   return <Bars />;\r\n      return <Welcome />;\r\n  }\r\n};\r\n\r\nPhase.propTypes = {\r\n  phase: PropTypes.string,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  phase: state.user.userState.phase,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(Phase);\r\n","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\actions\\user.js",["191","192"],"import { KEYGAME_SUCCESS, KEYGAME_FAIL, CHANGE_SCREEN } from './types';\r\nimport { w3cwebsocket as W3CWebSocket } from 'websocket';\r\nimport { PATH, ServerPORT } from '../utils/ClientUtils';\r\nvar client;\r\n//Login User\r\nexport const login = ({ name, keygame }) => async (dispatch) => {\r\n\ttry {\r\n\t\tclient = new W3CWebSocket(PATH + ':' + ServerPORT);\r\n\r\n\t\tclient.onopen = () => {\r\n\t\t\tclient.send(\r\n\t\t\t\tJSON.stringify({\r\n\t\t\t\t\ttype: 'REQ_USER_LOGIN',\r\n\t\t\t\t\tname: name,\r\n\t\t\t\t\tkeygame: keygame,\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t};\r\n\t\tclient.onmessage = (message) => {\r\n\t\t\tconst dataFromServer = JSON.parse(message.data);\r\n\t\t\tconst type = dataFromServer.type;\r\n\t\t\tconsole.log('got reply! ', dataFromServer);\r\n\t\t\tif (dataFromServer) {\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: type,\r\n\t\t\t\t\tpayload: dataFromServer,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t};\r\n\t} catch (err) {\r\n\t\t// const errors = err.response.data.errors;\r\n\t\t// if (errors) {\r\n\t\t//   errors.forEach((error) => dispatch(setAlert(error.msg, \"danger\")));\r\n\t\t// }\r\n\t\tconsole.log(err.message);\r\n\t\tdispatch({\r\n\t\t\ttype: KEYGAME_FAIL,\r\n\t\t});\r\n\t}\r\n};\r\n\r\n//TODO MIGHT NEED =>async dispatch\r\nexport const UserAnswer = (answerNum, time, quesNum) => async () => {\r\n  console.log(answerNum, time, quesNum);\r\n  client.send(\r\n    JSON.stringify({\r\n      type: \"USER_ANSWER\",\r\n      answer: answerNum,\r\n      time: time,\r\n      key: quesNum,\r\n    })\r\n  );\r\n\r\n};\r\n\r\nexport const videoEnd = () => async () => {\r\n\tclient.send(\r\n\t\tJSON.stringify({\r\n\t\t\ttype: 'VIDEO_END',\r\n\t\t})\r\n\t);\r\n};\r\n\r\nexport const sendPicture = (imgSrc) => async () => {\r\n\tclient.send(\r\n\t\tJSON.stringify({\r\n\t\t\ttype: 'IMG',\r\n\t\t\timg: imgSrc,\r\n\t\t})\r\n\t);\r\n};\r\n\r\nexport const CameraNotAllowed = () => async () => {\r\n  console.log(\"Falah is wrong\");\r\n  client.send(\r\n    JSON.stringify({\r\n      type: \"CAMERA_NOT_ALLOWED\",\r\n    })\r\n  );\r\n};\r\n","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\reducers\\index.js",[],"C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\components\\dashboard\\PlayersTable.js",[],"C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\components\\game\\Video.js",[],"C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\components\\game\\Groups.js",["193","194","195"],"import { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport React, { useState, useEffect } from 'react';\r\nimport { HorizontalBar } from \"react-chartjs-2\";\r\nimport correctSvg from \"../../assets/player.png\";\r\nimport incorrectSvg from \"../../assets/player.png\";\r\nimport \"chartjs-plugin-datalabels\";\r\nimport \"chartjs-plugin-labels\";\r\nimport \"../layouts/css/Groups.css\";\r\n\r\nconst Groups = ({\r\n  my_groups = {1:{curr_score:60},\r\n               2:{curr_score:90}},\r\n  answers = [\"1\", \"2\"],\r\n  winning = my_groups[1].curr_score>my_groups[2].curr_score? 1: my_groups[1].curr_score===my_groups[2].curr_score? 0 : 2,\r\n  correctAnswer = winning === 1? 1: winning === 2? 2 : 0, \r\n}) => {\r\n  const windowSize = useWindowSize();\r\n  let sentence;\r\n  if (winning === 0) {\r\n    sentence = <h7 style={{ display: \"inline-block\", color: '#273043'}}>תיקו בין הקבוצות</h7>;\r\n  } else {\r\n    sentence = \r\n    <h7 style={{ display: \"inline-block\", color: '#273043' }}>\r\n        קבוצה מספר :{\" \"}\r\n      <h7 style={{ display: \"inline-block\", color: \"green\", bold: true }}>{winning}</h7>\r\n      {\" \"} היא הקבוצה המובילה\r\n    </h7>;\r\n  }\r\n  let total = getTotalScores(my_groups)\r\n  let groups_score = castToScores(my_groups, total);\r\n  let imagesByResult = imagesSetter(answers, correctAnswer);\r\n  let colorSet = [\r\n    \"#2599E7\",\r\n    \"#EA3546\",\r\n  ];\r\n  let colorSetBorder = [\r\n    \"#276678\",\r\n    \"#951B26\",\r\n  ];\r\n  const data = {\r\n    labels: answers,\r\n    datasets: [\r\n      {\r\n        backgroundColor: colorSet,\r\n        hoverBorderColor: \"rgba(255,99,132,0)\",\r\n        data: Object.values(groups_score),\r\n        datalabels: {\r\n          anchor: \"center\",\r\n          backgroundColor: function (ctx) {\r\n            return null;\r\n          },\r\n          borderColor: function (ctx) {\r\n            var value = ctx.dataset.data[ctx.dataIndex];\r\n            return colorSetBorder[0];\r\n          },\r\n          font: {\r\n            weight: \"bold\",\r\n            size: Math.min(windowSize.height, windowSize.width)*0.06,\r\n          },\r\n          color: function (ctx) {\r\n            var value = ctx.dataset.data[ctx.dataIndex];\r\n            return value > 0 ? \"white\" : null;\r\n          },\r\n          formatter: function (value, ctx) {\r\n            if (!ctx.active) {\r\n              return Math.round((value * total) / 100);\r\n            } else if (ctx.dataIndex == correctAnswer - 1) {\r\n              return \"בהובלה\" ;\r\n            } else {\r\n              return \"מאחורה\";\r\n            }\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  };\r\n  return (\r\n    <div className='flex-container-groups'>\r\n      <div className='header-groups' style={{marginTop:\"2%\"}}>מצב הקבוצות</div>\r\n      <div className='header-sentence-groups' style={{marginTop:\"0.5%\"}}>{sentence}</div>\r\n      <div dir='ltr' className='bottom-bars-groups'>\r\n        <HorizontalBar\r\n          data={data}\r\n          options={{\r\n            animation: {\r\n              duration: 2500,\r\n            },\r\n            legend: {\r\n              display: false,\r\n            },\r\n            maintainAspectRatio: false,\r\n            plugins: {\r\n              labels: {\r\n                render: \"image\",\r\n                textMargin: 0,\r\n                images: imagesByResult,\r\n              },\r\n            },\r\n            scales: {\r\n              yAxes: [\r\n                {\r\n                  display: true,\r\n                  ticks: {\r\n                    fontSize: 30,\r\n                    max: 10\r\n                  },\r\n                  gridLines: {\r\n                    paddingTop: 10,\r\n                    drawBorder: true,\r\n                    color: \"black\",\r\n                    drawOnChartArea: false,\r\n                    drawTicks: false,\r\n                  },\r\n                },\r\n              ],\r\n              xAxes: [\r\n                {\r\n                  gridLines: {\r\n                    display: false,\r\n                  },\r\n                  ticks: {\r\n                    display: false,\r\n                    fontSize: 30,\r\n                    beginAtZero: true,\r\n                  },\r\n\r\n                },\r\n              ],\r\n            },\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction imagesSetter(answers, winning){\r\n  let imagesByResult = [];\r\n  let correctA = {\r\n    src: correctSvg,\r\n    width: 30,\r\n    height: 30\r\n  }\r\n\r\n  let wrongA = {\r\n    src: incorrectSvg,\r\n    width: 50,\r\n    height: 30\r\n  }\r\n\r\n  for (let index = 0; index < answers.length; index++) {\r\n    if (index + 1 == winning) {\r\n        imagesByResult[index] = correctA;\r\n      }\r\n    else {\r\n        imagesByResult[index] = wrongA;\r\n    }\r\n  }\r\n  return imagesByResult;\r\n}\r\n\r\nfunction getTotalScores(my_groups) {\r\n  let total = 0;\r\n  Object.keys(my_groups).forEach((element) => {\r\n    total += my_groups[element].curr_score;\r\n  });\r\n  return total;\r\n};\r\n\r\nfunction castToScores(my_groups, total) {\r\n  let scores = {};\r\n  Object.keys(my_groups).forEach((element) => {\r\n    scores[element] = Math.round((100 * my_groups[element].curr_score) / total);\r\n  });\r\n  return scores;\r\n};\r\n\r\nGroups.propTypes = {\r\n  my_groups: PropTypes.object.isRequired,\r\n  term: PropTypes.string.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    my_groups: state.user.userState.phaseProp.groups,\r\n    term: state.user.userState.phaseProp.term,\r\n});\r\n\r\nfunction useWindowSize() {\r\n  const [windowSize, setWindowSize] = useState({\r\n    width: undefined,\r\n    height: undefined,\r\n  });\r\n\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setWindowSize({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n      });\r\n    }\r\n    window.addEventListener(\"resize\", handleResize);\r\n    handleResize();\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []);\r\n  return windowSize;\r\n}\r\n\r\nexport default connect(mapStateToProps, {})(Groups);\r\n","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\components\\game\\Answer.js",[],"C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\components\\game\\Bars.js",["196","197","198"],"import { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport correctSvg from \"../../assets/success-green-check-mark.svg\";\r\nimport incorrectSvg from \"../../assets/wrong.svg\";\r\nimport \"chartjs-plugin-datalabels\";\r\nimport \"chartjs-plugin-labels\";\r\nimport \"../layouts/css/Bars.css\";\r\nconst Bars = ({\r\n  distribution,\r\n  correctAnswer,\r\n  correctTerm,\r\n  userAnswer,\r\n  audioKey,\r\n}) => {\r\n  const windowSize = useWindowSize();\r\n  let sentence;\r\n  if (correctAnswer == userAnswer) {\r\n    sentence = \"כל הכבוד ! תשובתך נכונה.\";\r\n  } else {\r\n    sentence = \"טעית, בפעם הבאה תצליח\";\r\n  }\r\n  let correctAns = (\r\n    <h7 style={{ display: \"inline-block\" }}>\r\n      התשובה הנכונה היא:{\" \"}\r\n      <h7 style={{ display: \"inline-block\", color: \"green\" }}>{correctTerm}</h7>\r\n    </h7>\r\n  );\r\n  let distributionPercent = castToPercent(distribution);\r\n  let imagesByResult = imagesSetter(\r\n    Object.keys(distribution).length,\r\n    correctAnswer,\r\n    userAnswer\r\n  );\r\n  let colorSet = [\r\n    \"#0ead69\",\r\n    \"#fdbd27\",\r\n    \"#ea3546\",\r\n    \"#2599e7\",\r\n    \"#d4d5fd\",\r\n    \"#f86624\",\r\n  ];\r\n  const data = {\r\n    labels: Object.keys(distribution),\r\n    datasets: [\r\n      {\r\n        backgroundColor: colorSet,\r\n        borderColor: colorSet,\r\n        hoverBorderColor: \"rgba(255,99,132,1)\",\r\n        data: Object.values(distributionPercent),\r\n        datalabels: {\r\n          anchor: \"center\",\r\n          offset: 0,\r\n          backgroundColor: function (ctx) {\r\n            // var value = ctx.dataset.data[ctx.dataIndex];\r\n            // return value > 50 ? \"white\" : null;\r\n            return null;\r\n          },\r\n          borderColor: function (ctx) {\r\n            // var value = ctx.dataset.data[ctx.dataIndex];\r\n            // return value > 0 ? \"white\" : null;\r\n            // return \"white\";\r\n            return null;\r\n          },\r\n          // borderWidth: 2,\r\n          // borderRadius: 4,\r\n          font: {\r\n            weight: \"bold\",\r\n            size: Math.min(windowSize.height, windowSize.width)*0.05,\r\n          },\r\n          color: function (ctx) {\r\n            var value = ctx.dataset.data[ctx.dataIndex];\r\n            return value > 0 ? \"white\" : null;\r\n            // return \"white\";\r\n          },\r\n          formatter: function (value, ctx) {\r\n            if (!ctx.active) {\r\n              return value + \"%\";\r\n            } else if (ctx.dataIndex == correctAnswer - 1) {\r\n              return \"התשובה הנכונה\";\r\n            } else if (ctx.dataIndex == userAnswer - 1) {\r\n              return \"תשובתך\";\r\n            } else {\r\n              return value + \"%\";\r\n            }\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  };\r\n  return (\r\n    <div className=\"flex-container-main-bars\">\r\n      <h1 className=\"header-bars\">{sentence}</h1>\r\n      <h1 className=\"header-bars\" style={{ marginTop: \"0%\" }}>\r\n        {correctAns}\r\n      </h1>\r\n      <audio autoPlay>\r\n        <source src={\"assets/bars/\" + audioKey + \".m4a\"} />\r\n      </audio>\r\n      <div dir=\"ltr\" className=\"bottom-bars\">\r\n        <Bar\r\n          data={data}\r\n          options={{\r\n            layout: {\r\n              padding: { top: 80 },\r\n            },\r\n            animation: {\r\n              duration: 2300,\r\n            },\r\n            legend: {\r\n              display: false,\r\n            },\r\n            maintainAspectRatio: false,\r\n            plugins: {\r\n              labels: {\r\n                render: \"image\",\r\n                textMargin: 5,\r\n                images: imagesByResult,\r\n              },\r\n            },\r\n            scales: {\r\n              xAxes: [\r\n                {\r\n                  maxBarThickness: 300,\r\n                  display: true,\r\n                  ticks: {\r\n                    fontSize: 20,\r\n                  },\r\n                  gridLines: {\r\n                    //xAxe Line\r\n                    drawBorder: true,\r\n                    color: \"black\",\r\n                    drawOnChartArea: false,\r\n                    drawTicks: false,\r\n                  },\r\n                },\r\n              ],\r\n              yAxes: [\r\n                {\r\n                  gridLines: {\r\n                    display: false,\r\n                  },\r\n                  ticks: {\r\n                    display: false,\r\n                  },\r\n                },\r\n              ],\r\n            },\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction imagesSetter(numOfAnswers, correctAnswer, userAnswer) {\r\n  let imagesByResult = [];\r\n  for (let index = 0; index < numOfAnswers; index++) {\r\n    if (index + 1 === userAnswer || index + 1 === correctAnswer) {\r\n      if (userAnswer === index + 1) {\r\n        imagesByResult[index] = {\r\n          //Wrong Answer\r\n          src: incorrectSvg,\r\n          width: 30,\r\n          height: 30,\r\n        };\r\n      }\r\n      if (correctAnswer === index + 1) {\r\n        imagesByResult[index] = {\r\n          //Correct Answer\r\n          src: correctSvg,\r\n          width: 30,\r\n          height: 30,\r\n        };\r\n      }\r\n    } else {\r\n      imagesByResult[index] = null;\r\n    }\r\n  }\r\n  return imagesByResult;\r\n}\r\n\r\nfunction castToPercent(distribution) {\r\n  let total = 0;\r\n  Object.values(distribution).forEach((element) => {\r\n    total += element;\r\n  });\r\n\r\n  let distributionPercent = {};\r\n  let tmp = 1;\r\n  Object.keys(distribution).forEach((element) => {\r\n    distributionPercent[tmp] = Math.round(\r\n      (100 * distribution[element]) / total\r\n    );\r\n    tmp++;\r\n  });\r\n  return distributionPercent;\r\n}\r\n\r\nfunction useWindowSize() {\r\n  const [windowSize, setWindowSize] = useState({\r\n    width: undefined,\r\n    height: undefined,\r\n  });\r\n\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setWindowSize({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n      });\r\n    }\r\n    window.addEventListener(\"resize\", handleResize);\r\n    handleResize();\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []);\r\n  return windowSize;\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  distribution: state.user.userState.phaseProp.distribution,\r\n  correctAnswer: state.user.userState.phaseProp.correctAnswer,\r\n  userAnswer: state.user.userState.phaseProp.userAnswer,\r\n  correctTerm: state.user.userState.phaseProp.correctTerm,\r\n  audioKey: state.user.userState.phaseProp.key,\r\n});\r\n\r\nBars.propTypes = {\r\n  distribution: PropTypes.object.isRequired,\r\n  correctAnswer: PropTypes.number.isRequired,\r\n  userAnswer: PropTypes.number.isRequired,\r\n  correctTerm: PropTypes.string.isRequired,\r\n  audioKey: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, {})(Bars);\r\n","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\components\\game\\Top3.js",["199","200","201"],"C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\components\\game\\Poll.js",[],"C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\components\\game\\WebcamCapture.js",["202","203","204"],"import Webcam from \"react-webcam\";\r\nimport { sendPicture, CameraNotAllowed } from \"../../actions/user\";\r\nimport PropTypes from \"prop-types\";\r\nimport React, { Component, useState, useEffect } from \"react\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport { connect } from \"react-redux\";\r\nimport ReactRoundedImage from \"react-rounded-image\";\r\nimport ScreenshotAudio from \"../../assets/Screenshot.mp3\";\r\nimport \"../layouts/css/WebcamCapture.css\";\r\n\r\nclass WebcamCapture extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      webcamRef: null,\r\n      ShowText: false,\r\n      Seconds: 1,\r\n      ImgExist: false,\r\n      CaptureImage: null,\r\n\t  audio: false,\r\n    disabledPictue: true,\r\n    notAllowed: false,\r\n    };\r\n\tthis.start = this.start.bind(this);\r\n  this.allow = this.allow.bind(this);\r\n  }\r\n\r\n  start() {\r\n    this.setStatePromise({\r\n      ImgExist: false,\r\n      ShowText: true,\t\r\n      Seconds: 3,\r\n      audio: false,\r\n    })\r\n      .then(() => this.sleep(1100))\r\n      .then(() => this.setStatePromise({ Seconds: 2 }))\r\n      .then(() => this.sleep(1000))\r\n      .then(() => this.setStatePromise({ Seconds: 1 }))\r\n      .then(() => this.sleep(1000))\r\n      .then(() => this.setStatePromise({ ShowText: false, audio: true }))\r\n      .then(() => this.sleep(500))\r\n      .then(() =>\r\n        this.setStatePromise({\r\n          ImgExist: true,\r\n          CaptureImage: this.webcamRef.getScreenshot(),\r\n        })\r\n      );\r\n  }\r\n\r\n  sleep(ms) {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  }\r\n\r\n  setStatePromise(state) {\r\n    this.setState(state);\r\n    return Promise.resolve();\r\n  }\r\n\r\n  setRef = (webcam) => {\r\n\tthis.webcamRef = webcam;\r\n  };\r\n\r\n  allow(){\r\n    if (this.state.disabledPictue){\r\n      this.setStatePromise(({disabledPictue: false}))\r\n    }\r\n  };\r\n\r\n  updateAllow(state) {\r\n    if(state === 'denied' && document.getElementById('passPage')!==null){\r\n      document.getElementById('passPage').click();\r\n    }\r\n  }\r\n  \r\n  componentDidMount() {\r\n    navigator.permissions.query({ name: 'camera' }).then((result) => {\r\n      this.updateAllow(result.state);\r\n      result.addEventListener('change', () => {\r\n        this.updateAllow(result.state);\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {    \r\n    return (\r\n      <div>\r\n        {this.state.audio && (\r\n          <audio autoPlay>\r\n            <source type=\"audio/mp3\" src={ScreenshotAudio} />\r\n          </audio>\r\n        )}\r\n        {!this.state.ImgExist && <div className=\"mark\" />}\r\n        <div className=\"flex-container-webcam-main\">\r\n          <div className=\"flex-container-webcam-col\">\r\n            <Typography variant=\"h2\">צילום תמונת משתתף</Typography>\r\n            <Typography variant=\"h9\" style={{ marginTop: 5 }}>\r\n              אנא נסו למקם את הפנים במרכז האזור המסומן בעיגול\r\n            </Typography>\r\n            {/* </div> */}\r\n            <div className=\"item\">\r\n              {this.state.ImgExist ? (\r\n                <ReactRoundedImage\r\n                  className=\"img\"\r\n                  image={this.state.CaptureImage}\r\n                  roundedSize=\"1\"\r\n                  imageWidth=\"350\"\r\n                  imageHeight=\"350\"\r\n                />\r\n              ) : (\r\n                <div>\r\n                  {/* <div className=\"mark\" /> */}\r\n                  <Webcam\r\n                    ref={this.setRef}\r\n                    audio={false}\r\n                    height=\"350\"\r\n                    onUserMedia={this.allow}\r\n                    screenshotFormat=\"image/jpeg\"\r\n                  />\r\n                </div>\r\n              )}\r\n            </div>\r\n            <div className=\"item\">\r\n              {!this.state.disabledPictue &&\r\n\t\t\t  <button\r\n                className=\"myButton\"\r\n                // disabled={this.state.ShowText}\r\n                onClick={this.start}\r\n                disabled={this.state.disabledPictue}\r\n              >\r\n            \t{this.state.ImgExist ? \"צלמ/י שוב\" : \"צלמ/י תמונה\"}\r\n              </button>}\r\n              {this.state.ImgExist && (\r\n                <button\r\n                  className=\"myButton\"\r\n\t\t\t\t  onClick={sendPicture(this.state.CaptureImage)}\r\n                >\r\n                  אשר/י תמונה\r\n                </button>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {this.state.ShowText && (\r\n          <div className=\"counter-text\">{this.state.Seconds}</div>\r\n        )}\r\n      <button id=\"passPage\" style={{visibility: \"hidden\"}} onClick={CameraNotAllowed()}></button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nWebcamCapture.propTypes = {\r\n  sendPicture: PropTypes.func.isRequired,\r\n  CameraNotAllowed: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({});\r\n\r\nexport default connect(mapStateToProps, { sendPicture, CameraNotAllowed })(WebcamCapture);\r\n","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\components\\game\\Question.js",["205","206"],"import { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport { UserAnswer } from \"../../actions/user\";\r\nimport KeyboardEventHandler from \"react-keyboard-event-handler\";\r\nimport { Textfit } from \"react-textfit\";\r\nimport \"../layouts/css/Questions.css\";\r\nimport { ScaleLoader } from \"react-spinners\";\r\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\r\nclass Question extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      part: \"listening q\",\r\n      calledTime: new Date(),\r\n      quesDuration: 0,\r\n      selected: -1, // start from 0 . for present the currect answer\r\n      key: 0,\r\n    };\r\n    this.classNames = null;\r\n    this.indexes = [props.answers.length];\r\n    this.clocktimer = null;\r\n    this.remainTime = null;\r\n    this.createIndexes(props.answers.length);\r\n    this.audioPathQuestion = \"assets/question/\" + this.props.quesNum + \"_1.m4a\";\r\n    this.audioPathAnswers = \"assets/question/\" + this.props.quesNum + \"_2.m4a\";\r\n  }\r\n\r\n  createIndexes = (numOfAnswers) => {\r\n    let tmp = 0;\r\n    for (let index = 0; index < numOfAnswers; index++) {\r\n      tmp = index + 1;\r\n      this.indexes[index] = tmp + \"\";\r\n    }\r\n  };\r\n\r\n  remainTimeFunc = () => {\r\n    var remainTime =\r\n      this.state.calledTime.getTime() +\r\n      (this.state.quesDuration + this.state.ansAudio.duration) * 1000 +\r\n      this.props.time * 1000 -\r\n      new Date().getTime();\r\n    return remainTime;\r\n  };\r\n\r\n  renderTime = ({ remainingTime }) => {\r\n    if (remainingTime === 0) {\r\n      return <div>!</div>;\r\n    }\r\n    return <div>{remainingTime}</div>;\r\n  };\r\n\r\n  onAnswerClick = (ind) => {\r\n    this.setState({ part: \"answered\", selected: ind - 1 });\r\n    this.props.UserAnswer(\r\n      ind,\r\n      Math.round(this.remainTimeFunc()),\r\n      this.props.quesNum\r\n    );\r\n  };\r\n\r\n  handleKeyDown = (key) => {\r\n    this.setState({\r\n      part: \"answered\",\r\n      selected: parseInt(key) - 1,\r\n    });\r\n    this.props.UserAnswer(\r\n      parseInt(key),\r\n      Math.round(this.remainTimeFunc()),\r\n      this.props.quesNum\r\n    );\r\n  };\r\n  renderTime = ({ remainingTime }) => {\r\n    if (remainingTime === 0) {\r\n      return <div>!</div>;\r\n    }\r\n    return <div>{remainingTime}</div>;\r\n  };\r\n\r\n  componentDidMount() {\r\n    const self = this;\r\n    if (this.state.part === \"listening q\") {\r\n      var audioElement = document.getElementById(\"myAudioQues\");\r\n      if (audioElement != null) {\r\n        audioElement.addEventListener(\r\n          \"ended\",\r\n          function () {\r\n            self.setState({ part: \"animation\" });\r\n          },\r\n          false\r\n        );\r\n      }\r\n      audioElement.addEventListener(\"loadedmetadata\", (e) => {\r\n        self.state.quesDuration = e.target.duration;\r\n      });\r\n      window.addEventListener(\"focus\", () => {\r\n        if (self.state.part === \"choosing\") {\r\n          self.setState({ key: self.state.key + 1 });\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let allQuestDivs = [];\r\n    const part = this.state.part;\r\n    console.log(\"render part  ----> \" + this.state.part);\r\n    if (part === \"listening q\") {\r\n      let ansAudio = new Audio(this.audioPathAnswers);\r\n      ansAudio.addEventListener(\"ended\", () =>\r\n        this.setState({ part: \"choosing\" })\r\n      );\r\n      this.state.ansAudio = ansAudio;\r\n    } else if (part === \"animation\") {\r\n      this.state.ansAudio.play();\r\n      const classNames = [\r\n        \" singleAnswer e1\",\r\n        \" singleAnswer e2\",\r\n        \" singleAnswer e3\",\r\n        \" singleAnswer e4\",\r\n      ];\r\n      for (\r\n        let index = 0;\r\n        index < this.props.answers.length;\r\n        index = index + 1\r\n      ) {\r\n        let questDiv = (\r\n          <div>\r\n            <button className={classNames[index]} disabled={true}>\r\n              <div className='flexbox-row-single-ques'>\r\n                <div className={\"numberCircle\"}>{index + 1}</div>\r\n                <div className='text-inside-ans'>\r\n                  {this.props.answers[index]}\r\n                </div>\r\n              </div>\r\n            </button>\r\n          </div>\r\n        );\r\n        allQuestDivs.push(questDiv);\r\n      }\r\n      this.clocktimer = (\r\n        <div className='clockCenter'>\r\n          <CountdownCircleTimer\r\n            isPlaying={false}\r\n            size={80}\r\n            // duration={() => getRemainTime()}\r\n            duration={this.props.time}\r\n            colors={[\r\n              [\"#004777\", 0.33],\r\n              [\"#F7B801\", 0.33],\r\n              [\"#A30000\", 0.33],\r\n            ]}\r\n            onComplete={() => {\r\n              this.setState({ part: \"answered\" });\r\n            }}\r\n          >\r\n            {({ remainingTime }) => remainingTime}\r\n          </CountdownCircleTimer>\r\n        </div>\r\n      );\r\n    } else if (part === \"choosing\") {\r\n      const classNames = [\r\n        \"hovering singleAnswer s1\",\r\n        \"hovering singleAnswer s2\",\r\n        \"hovering singleAnswer s3\",\r\n        \"hovering singleAnswer s4\",\r\n      ];\r\n      for (\r\n        let index = 0;\r\n        index < this.props.answers.length;\r\n        index = index + 1\r\n      ) {\r\n        let questDiv = (\r\n          <button\r\n            className={classNames[index]}\r\n            onClick={() => this.onAnswerClick(index + 1)}\r\n          >\r\n            <div className='flexbox-row-single-ques'>\r\n              <div className={\"numberCircle\"}>{index + 1}</div>\r\n              <div className='text-inside-ans'>{this.props.answers[index]}</div>\r\n            </div>\r\n          </button>\r\n        );\r\n        allQuestDivs.push(questDiv);\r\n      }\r\n      let remainTime = this.remainTimeFunc();\r\n      remainTime = remainTime > 500 ? remainTime : 0;\r\n      this.clocktimer = (\r\n        <div className='clockCenter'>\r\n          <CountdownCircleTimer\r\n            key={this.state.key}\r\n            size={80}\r\n            isPlaying={true}\r\n            duration={this.props.time} // should be Time Left !\r\n            initialRemainingTime={remainTime / 1000}\r\n            colors={[\r\n              [\"#004777\", 0.33],\r\n              [\"#F7B801\", 0.33],\r\n              [\"#A30000\", 0.33],\r\n            ]}\r\n          >\r\n            {(remainingTime) => this.renderTime(remainingTime)}\r\n          </CountdownCircleTimer>\r\n        </div>\r\n      );\r\n    } else if (part === \"answered\") {\r\n      const classNames = [\r\n        \"singleAnswer e1\",\r\n        \"singleAnswer e2\",\r\n        \"singleAnswer e3\",\r\n        \"singleAnswer e4\",\r\n      ];\r\n      if (this.state.selected >= 0) {\r\n        classNames[this.state.selected] =\r\n          \"singleAnswer s\" + (this.state.selected + 1);\r\n      }\r\n      for (\r\n        let index = 0;\r\n        index < this.props.answers.length;\r\n        index = index + 1\r\n      ) {\r\n        let questDiv = (\r\n          <button disabled={true} className={classNames[index]}>\r\n            <div className='flexbox-row-single-ques'>\r\n              <div className={\"numberCircle\"}>{index + 1}</div>\r\n              <div className='text-inside-ans'>{this.props.answers[index]}</div>\r\n            </div>\r\n          </button>\r\n        );\r\n        allQuestDivs.push(questDiv);\r\n      }\r\n      let remainTime = this.remainTimeFunc();\r\n      remainTime = remainTime > 500 ? remainTime : 0;\r\n\r\n      this.clocktimer = (\r\n        <div className='clockCenter'>\r\n          <CountdownCircleTimer\r\n            size={80}\r\n            isPlaying\r\n            duration={this.props.time} // should be Time Left !\r\n            initialRemainingTime={remainTime / 1000}\r\n            colors={[\r\n              [\"#004777\", 0.33],\r\n              [\"#F7B801\", 0.33],\r\n              [\"#A30000\", 0.33],\r\n            ]}\r\n          >\r\n            {(remainingTime) => this.renderTime(remainingTime)}\r\n          </CountdownCircleTimer>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    /*\r\n    Components Declareations :\r\n    */\r\n\r\n    const listeningQuestion = (\r\n      <div className='flex-container-q'>\r\n        <div className='question'>{this.props.question}</div>\r\n        <div>\r\n          <ScaleLoader />\r\n        </div>\r\n        <audio id='myAudioQues' autoPlay>\r\n          <source src={this.audioPathQuestion} />\r\n        </audio>\r\n      </div>\r\n    );\r\n\r\n    const animation = (\r\n      <div className='flex-container-q'>\r\n        <div className='quest-animation'>{this.props.question}</div>\r\n        <div className='clock-animation clockCenter'>{this.clocktimer}</div>\r\n        <div className='quest-container-answered'>{allQuestDivs}</div>\r\n      </div>\r\n    );\r\n\r\n    const listeningAnswers = (\r\n      <div className='flex-container-q'>\r\n        <div className='quest-listen-answers'>{this.props.question}</div>\r\n        <div className='clockCenter'>{this.clocktimer}</div>\r\n        <div className='quest-container-answered'>{allQuestDivs}</div>\r\n        <KeyboardEventHandler\r\n          handleKeys={this.indexes}\r\n          onKeyEvent={(key) => this.handleKeyDown(key)}\r\n        />\r\n      </div>\r\n    );\r\n\r\n    const answeredAndWait = (\r\n      <div className='flex-container-q'>\r\n        <div className='quest-listen-answers'>{this.props.question}</div>\r\n        <div className='clockCenter'>{this.clocktimer}</div>\r\n        <div className='quest-container-answered'>{allQuestDivs}</div>\r\n        <div className='wait-users'>תשובתך נקלטה.. ממתין לשאר החברים </div>\r\n      </div>\r\n    );\r\n    if (part === \"listening q\") {\r\n      return listeningQuestion;\r\n    } else if (part === \"animation\") {\r\n      return animation;\r\n    } else if (part === \"choosing\") {\r\n      return listeningAnswers;\r\n    } else if (part === \"answered\") {\r\n      return answeredAndWait;\r\n    }\r\n  }\r\n}\r\n\r\nQuestion.propTypes = {\r\n  question: PropTypes.string.isRequired,\r\n  answers: PropTypes.array,\r\n  time: PropTypes.number,\r\n  UserAnswer: PropTypes.func.isRequired,\r\n  quesNum: PropTypes.string.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  question: state.user.userState.phaseProp.question,\r\n  answers: state.user.userState.phaseProp.answers,\r\n  time: state.user.userState.phaseProp.time,\r\n  quesNum: state.user.userState.phaseProp.key,\r\n});\r\n\r\nexport default connect(mapStateToProps, { UserAnswer })(Question);\r\n\r\n// import { connect } from \"react-redux\";\r\n// import PropTypes from \"prop-types\";\r\n// import React from \"react\";\r\n// import { UserAnswer } from \"../../actions/user\";\r\n// import KeyboardEventHandler from \"react-keyboard-event-handler\";\r\n// import { Textfit } from \"react-textfit\";\r\n// import \"../layouts/css/Questions.css\";\r\n// import { ScaleLoader } from \"react-spinners\";\r\n// import { CountdownCircleTimer } from \"react-countdown-circle-timer\";\r\n// // Didnt finished Timing !!! not heard is correct\r\n// class Question extends React.Component {\r\n//   constructor() {\r\n//     super();\r\n\r\n//     this.state = {\r\n//       part: \"listening q\",\r\n//       calledTime: new Date(),\r\n//       quesDuration: 0,\r\n//       selected: -1, // start from 0 . for present the currect answer\r\n//       key: 0,\r\n//     };\r\n//   }\r\n\r\n//   remainTimeFunc = () => {\r\n//     var remainTime =\r\n//       this.state.calledTime.getTime() +\r\n//       (this.state.quesDuration + this.state.ansAudio.duration) * 1000 +\r\n//       this.props.time * 1000 -\r\n//       new Date().getTime();\r\n//     return remainTime;\r\n//   };\r\n\r\n//   onAnswerClick = (ind) => {\r\n//     this.setState({ part: \"answered\", selected: ind - 1 });\r\n//     this.props.UserAnswer(\r\n//       ind,\r\n//       Math.round(this.remainTimeFunc()),\r\n//       this.props.quesNum\r\n//     );\r\n//   };\r\n\r\n//   handleKeyDown = (key) => {\r\n//     this.setState({\r\n//       part: \"answered\",\r\n//       selected: parseInt(key) - 1,\r\n//     });\r\n//     this.props.UserAnswer(\r\n//       parseInt(key),\r\n//       Math.round(this.remainTimeFunc()),\r\n//       this.props.quesNum\r\n//     );\r\n//   };\r\n\r\n//   componentDidMount() {\r\n//     const self = this;\r\n//     if (this.state.part === \"listening q\") {\r\n//       var audioElement = document.getElementById(\"myAudioQues\");\r\n//       if (audioElement != null) {\r\n//         audioElement.addEventListener(\r\n//           \"ended\",\r\n//           function () {\r\n//             self.setState({ part: \"animation\" });\r\n//           },\r\n//           false\r\n//         );\r\n//       }\r\n//       audioElement.addEventListener(\"loadedmetadata\", (e) => {\r\n//         self.state.quesDuration = e.target.duration;\r\n//       });\r\n//       window.addEventListener(\"focus\", () => {\r\n//         if (self.state.part === \"choosing\") {\r\n//           self.setState({ key: self.state.key + 1 });\r\n//         }\r\n//       });\r\n//     }\r\n//   }\r\n\r\n//   render() {\r\n//     console.log(\"render part  ----> \" + this.state.part);\r\n//     var part = this.state.part;\r\n//     var questDiv;\r\n//     var allQuestDivs = [];\r\n//     var classNames = [];\r\n//     const indexes = [];\r\n//     var clocktimer;\r\n//     let tmp = 0;\r\n//     var remainTime;\r\n//     const renderTime = ({ remainingTime }) => {\r\n//       if (remainingTime === 0) {\r\n//         return <div dir='ltr'>!</div>;\r\n//       }\r\n//       return <div>{remainingTime}</div>;\r\n//     };\r\n//     const audioPathQuestion =\r\n//       \"assets/question/\" + this.props.quesNum + \"_1.m4a\";\r\n//     const audioPathAnswers = \"assets/question/\" + this.props.quesNum + \"_2.m4a\";\r\n//     // const clickSound = \"assets/sample/mouseclick.m4a\";\r\n//     for (let index = 0; index < this.props.answers.length; index++) {\r\n//       tmp = index + 1;\r\n//       indexes[index] = tmp + \"\";\r\n//     }\r\n\r\n//     /* Defining Components */\r\n\r\n//     if (part === \"listening q\") {\r\n//       var ansAudio = new Audio(audioPathAnswers);\r\n//       ansAudio.addEventListener(\"ended\", () =>\r\n//         this.setState({ part: \"choosing\" })\r\n//       );\r\n//       this.state.ansAudio = ansAudio;\r\n//     } else if (part === \"animation\") {\r\n//       this.state.ansAudio.play();\r\n//       classNames = [\r\n//         \"hovering singleAnswer e1\",\r\n//         \"hovering singleAnswer e2\",\r\n//         \"hovering singleAnswer e3\",\r\n//         \"hovering singleAnswer e4\",\r\n//       ];\r\n//       for (\r\n//         let index = 0;\r\n//         index < this.props.answers.length;\r\n//         index = index + 1\r\n//       ) {\r\n//         questDiv = (\r\n//           <div>\r\n//             <button className={classNames[index]} disabled={true}>\r\n//               <div className={\"numberCircle\"}>{index + 1}</div>\r\n//               <Textfit max={40} min={26} mode='multi'>\r\n//                 {this.props.answers[index]}\r\n//               </Textfit>\r\n//             </button>\r\n//           </div>\r\n//         );\r\n//         allQuestDivs.push(questDiv);\r\n//       }\r\n//       clocktimer = (\r\n//         <div className='clockCenter'>\r\n//           <CountdownCircleTimer\r\n//             isPlaying={false}\r\n//             size={80}\r\n//             // duration={() => getRemainTime()}\r\n//             duration={this.props.time}\r\n//             colors={[\r\n//               [\"#004777\", 0.33],\r\n//               [\"#F7B801\", 0.33],\r\n//               [\"#A30000\", 0.33],\r\n//             ]}\r\n//             // onComplete={() => {\r\n//             //   this.setState({ part: \"answered\" });\r\n//             // }}\r\n//           >\r\n//             {({ remainingTime }) => remainingTime}\r\n//           </CountdownCircleTimer>\r\n//         </div>\r\n//       );\r\n//     } else if (part === \"choosing\") {\r\n//       classNames = [\r\n//         \"singleAnswer s1\",\r\n//         \"singleAnswer s2\",\r\n//         \"singleAnswer s3\",\r\n//         \"singleAnswer s4\",\r\n//       ];\r\n//       for (\r\n//         let index = 0;\r\n//         index < this.props.answers.length;\r\n//         index = index + 1\r\n//       ) {\r\n//         questDiv = (\r\n//           <button\r\n//             className={classNames[index]}\r\n//             onClick={() => this.onAnswerClick(index + 1)}\r\n//           >\r\n//             <div className={\"numberCircle\"}>{index + 1}</div>\r\n//             <Textfit max={40} min={26} mode='multi'>\r\n//               {this.props.answers[index]}\r\n//             </Textfit>\r\n//           </button>\r\n//         );\r\n//         allQuestDivs.push(questDiv);\r\n//       }\r\n//       remainTime = this.remainTimeFunc();\r\n//       remainTime = remainTime > 500 ? remainTime : 0;\r\n//       clocktimer = (\r\n//         <div className='clockCenter'>\r\n//           <CountdownCircleTimer\r\n//             key={this.state.key}\r\n//             size={80}\r\n//             isPlaying={true}\r\n//             duration={this.props.time} // should be Time Left !\r\n//             initialRemainingTime={remainTime / 1000}\r\n//             colors={[\r\n//               [\"#004777\", 0.33],\r\n//               [\"#F7B801\", 0.33],\r\n//               [\"#A30000\", 0.33],\r\n//             ]}\r\n//           >\r\n//             {renderTime}\r\n//           </CountdownCircleTimer>\r\n//         </div>\r\n//       );\r\n//     } else if (part === \"answered\") {\r\n//       classNames = [\r\n//         \"singleAnswer e1\",\r\n//         \"singleAnswer e2\",\r\n//         \"singleAnswer e3\",\r\n//         \"singleAnswer e4\",\r\n//       ];\r\n//       if (this.state.selected >= 0) {\r\n//         classNames[this.state.selected] =\r\n//           \"singleAnswer s\" + (this.state.selected + 1);\r\n//       }\r\n//       for (\r\n//         let index = 0;\r\n//         index < this.props.answers.length;\r\n//         index = index + 1\r\n//       ) {\r\n//         questDiv = (\r\n//           <button disabled={true} className={classNames[index]}>\r\n//             <Textfit max={40} min={26} mode='multi'>\r\n//               {this.props.answers[index]}\r\n//             </Textfit>\r\n//           </button>\r\n//         );\r\n//         allQuestDivs.push(questDiv);\r\n//       }\r\n//       remainTime = this.remainTimeFunc();\r\n//       remainTime = remainTime > 500 ? remainTime : 0;\r\n//       const renderTime = ({ remainingTime }) => {\r\n//         if (remainingTime === 0) {\r\n//           return <div dir='ltr'>!</div>;\r\n//         }\r\n//         return <div>{remainingTime}</div>;\r\n//       };\r\n\r\n//       clocktimer = (\r\n//         <div className='clockCenter'>\r\n//           <CountdownCircleTimer\r\n//             size={80}\r\n//             isPlaying\r\n//             duration={this.props.time} // should be Time Left !\r\n//             initialRemainingTime={remainTime / 1000}\r\n//             colors={[\r\n//               [\"#004777\", 0.33],\r\n//               [\"#F7B801\", 0.33],\r\n//               [\"#A30000\", 0.33],\r\n//             ]}\r\n//           >\r\n//             {renderTime}\r\n//           </CountdownCircleTimer>\r\n//         </div>\r\n//       );\r\n//     }\r\n\r\n//     /*\r\n//     Func Declarations :\r\n//     */\r\n\r\n//     /*\r\n//     Components Declareations :\r\n//     */\r\n\r\n//     const listeningQuestion = (\r\n//       <div className='wholescreen'>\r\n//         <div className='flex-container'>\r\n//           <div dir='rtl' className='question'>\r\n//             {this.props.question}\r\n//           </div>\r\n//           <audio id='myAudioQues' autoPlay>\r\n//             <source src={audioPathQuestion} />\r\n//           </audio>\r\n//           <div style={{ marginTop: \"20px\" }}>\r\n//             <ScaleLoader />\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n\r\n//     const animation = (\r\n//       <div className='wholescreen-col'>\r\n//         <div dir='rtl' className='questAnimation'>\r\n//           {this.props.question}\r\n//         </div>\r\n//         <div className='clock-animation clockCenter'>{clocktimer}</div>\r\n//         <div className='quest-container'>{allQuestDivs}</div>\r\n//       </div>\r\n//     );\r\n\r\n//     const listeningAnswers = (\r\n//       <div className='wholescreen-col'>\r\n//         <div\r\n//           dir='rtl'\r\n//           style={{ position: \"absolute\", top: \"10%\", fontSize: \"48px\" }}\r\n//         >\r\n//           {this.props.question}\r\n//         </div>\r\n//         <div className='clockCenter'>{clocktimer}</div>\r\n//         <div className='quest-container-answered'>{allQuestDivs}</div>\r\n//         <KeyboardEventHandler\r\n//           handleKeys={indexes}\r\n//           onKeyEvent={(key, e) => this.handleKeyDown(key)}\r\n//         />\r\n//         {/* <audio id='click' autoPlay>\r\n//           <source src={clickSound} />\r\n//         </audio> */}\r\n//       </div>\r\n//     );\r\n\r\n//     const answeredAndWait = (\r\n//       <div className='wholescreen-col'>\r\n//         <div\r\n//           dir='rtl'\r\n//           style={{ position: \"absolute\", top: \"10%\", fontSize: \"48px\" }}\r\n//         >\r\n//           {this.props.question}\r\n//         </div>\r\n//         <div className='clockCenter'>{clocktimer}</div>\r\n//         <div className='quest-container-answered'>{allQuestDivs}</div>\r\n//         <div className='waitUsers'>wait for your last friends...</div>\r\n//         {/* <audio id='click' autoPlay>\r\n//           <source src={clickSound} />\r\n//         </audio> */}\r\n//       </div>\r\n//     );\r\n//     if (part === \"listening q\") {\r\n//       return listeningQuestion;\r\n//     } else if (part === \"animation\") {\r\n//       return animation;\r\n//     } else if (part === \"choosing\") {\r\n//       return listeningAnswers;\r\n//     } else if (part === \"answered\") {\r\n//       return answeredAndWait;\r\n//     }\r\n//   }\r\n// }\r\n\r\n// Question.propTypes = {\r\n//   question: PropTypes.string.isRequired,\r\n//   answers: PropTypes.array,\r\n//   time: PropTypes.number,\r\n//   UserAnswer: PropTypes.func.isRequired,\r\n//   quesNum: PropTypes.string.isRequired,\r\n// };\r\n\r\n// const mapStateToProps = (state) => ({\r\n//   question: state.user.userState.phaseProp.question,\r\n//   answers: state.user.userState.phaseProp.answers,\r\n//   time: state.user.userState.phaseProp.time,\r\n//   quesNum: state.user.userState.phaseProp.key,\r\n// });\r\n\r\n// export default connect(mapStateToProps, { UserAnswer })(Question);\r\n","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\reducers\\alert.js",[],"C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\reducers\\auth.js",[],"C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\reducers\\user.js",["207"],"import {\r\n  CHANGE_SCREEN,\r\n  KEYGAME_FAIL,\r\n  GAME_KEY_SUCCESS,\r\n  SERVER_FEEDBACK_TO_ANSWER,\r\n  PHASE,\r\n} from \"../actions/types\";\r\nconst initialState = {\r\n  name: \"\",\r\n  isAuthenticated: false,\r\n  userState: { phaseProp: {} },\r\n  // score: \"0\",\r\n  group: \"\",\r\n};\r\n//func name Changed from login to userReducer\r\nexport default function userReducer(state = initialState, action) {\r\n  const { type, payload } = action;\r\n  console.log(payload);\r\n  switch (type) {\r\n    case GAME_KEY_SUCCESS:\r\n      return {\r\n        ...state,\r\n        name: payload.name,\r\n        group: payload.group,\r\n        isAuthenticated: true,\r\n        userState: payload,\r\n      };\r\n    case KEYGAME_FAIL:\r\n      return {\r\n        ...state,\r\n        isAuthenticated: false,\r\n      };\r\n    case PHASE:\r\n      return {\r\n        ...state,\r\n        userState: payload,\r\n        //TODO:: change the screen state to name of the screen and not bool\r\n      };\r\n    case \"IMG\":\r\n      return {\r\n        ...state,\r\n        userState: payload,\r\n      };\r\n    case SERVER_FEEDBACK_TO_ANSWER:\r\n      return {\r\n        score: payload.score,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\reducers\\dashboard.js",[],"C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\components\\game\\SpotlightCheck.js",["208"],"import React from \"react\";\r\nimport Spotlight from 'react-spotlight';\r\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\r\nimport Confetti from 'react-dom-confetti';\r\n\r\n\r\n\r\nexport default class SpotlightCheck extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      playing: false,\r\n      x: 0,\r\n      y: 0,\r\n      radius: 0,\r\n      color: 'rgb(0,0,0, 0.80)',\r\n      borderColor: 'rgb(255,255,255)',\r\n      confetti_now: false,\r\n      config: {\r\n        angle: 90,\r\n        spread: 360,\r\n        startVelocity: 40,\r\n        elementCount: \"250\",\r\n        dragFriction: 0.15,\r\n        duration: 4500,\r\n        stagger: 4,\r\n        width: \"10px\",\r\n        height: \"10px\",\r\n        perspective: \"500px\",\r\n        colors: [\"#a864fd\", \"#29cdff\", \"#78ff44\", \"#ff718d\", \"#fdff6a\"]\r\n      },\r\n      starting: false,\r\n      winner: false,\r\n      radiusNormal: 220,\r\n      radiusWinner: 220,\r\n      width: 0, \r\n      height: 0,\r\n      placeText: '.playr-third'\r\n    };\r\n    this.start = this.start.bind(this);\r\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n    this.getRadius = this.getRadius.bind(this);\r\n  }  \r\n\r\n  componentDidMount() {\r\n    this.updateWindowDimensions();\r\n    window.addEventListener('resize', this.updateWindowDimensions);\r\n    this.start()\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.updateWindowDimensions();\r\n    window.addEventListener('resize', this.updateWindowDimensions);\r\n    this.start();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.updateWindowDimensions);\r\n  }\r\n  \r\n  updateWindowDimensions() {\r\n    this.setStatePromise({ width: window.innerWidth, height: window.innerHeight });\r\n    this.setStatePromise({ radiusNormal: Math.min(window.innerWidth, window.innerHeight)*0.25 });\r\n    this.setStatePromise({ radiusWinner: Math.min(window.innerWidth, window.innerHeight)*0.30 });\r\n    this.setStatePromise({ radius: this.getRadius()});\r\n    this.setStatePromise({ ...this.getCoordinates(this.state.placeText)});\r\n  }\r\n\r\n  getRadius() {\r\n    let starting = this.state.starting;\r\n    let winner = this.state.winner;\r\n    let radiusWinner = this.state.radiusWinner;\r\n    let radiusNormal = this.state.radiusNormal;\r\n    return (starting? (winner? radiusWinner : radiusNormal): 0);\r\n  } \r\n\r\n  start() {\r\n    this.setStatePromise({ confetti_now:false, playing: true, ...this.getCoordinates('.playr-third'), placeText:'.playr-third'})\r\n      .then(() => this.sleep(5000))\r\n      .then(() => this.setStatePromise({ ...this.getCoordinates('.playr-third'), text:'במקום השלישי', radius: this.state.radiusNormal, color: '#273043', starting: true } ))\r\n      .then(() => this.sleep(6000))\r\n      .then(() => this.setStatePromise({ ...this.getCoordinates('.playr-second'), text:'במקום השני',  placeText:'.playr-second' }))\r\n      .then(() => this.sleep(6000))\r\n      .then(() => this.setStatePromise({ ...this.getCoordinates('.playr-first'), text:'במקום הראשון', radius: this.state.radiusWinner, winner: true,  placeText:'.playr-first'}))\r\n      .then(() => this.sleep(3000))\r\n      .then(() => this.setStatePromise({ confetti_now:true, color: 'rgb(255,255,255)', radius: 1000 ,text: ''}))\r\n      .then(() => this.sleep(4000))\r\n      .then(() => this.setStatePromise({ playing: false, color: 'rgb(0,0,0, 0.80)', radius: 0, winner:false, starting:false }));\r\n  }\r\n\r\n\r\n  sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  }\r\n\r\n  setStatePromise(state) {\r\n    this.setState(state);\r\n    return Promise.resolve();\r\n  }\r\n\r\n  getCoordinates(selector) {\r\n    const domEl = document.querySelector(selector);\r\n    if (!domEl) return {};\r\n\r\n    const rect = document.querySelector(selector).getBoundingClientRect();\r\n    return { x: rect.left + (rect.width / 2), y: rect.top + (rect.height / 2) };\r\n  }\r\n  \r\n  render() {\r\n    return(\r\n        <div>\r\n          <div dir=\"rtl\">\r\n            <Confetti active={ this.state.confetti_now } config={this.state.config}/> \r\n          </div>\r\n          <div dir=\"ltr\">\r\n            <Confetti active={ this.state.confetti_now } config={this.state.config}/> \r\n          </div>\r\n        <ReactCSSTransitionGroup\r\n          transitionName=\"fade\"\r\n          transitionEnterTimeout={500}\r\n          transitionLeaveTimeout={300}>\r\n          {this.state.playing && (\r\n            <div key=\"1\">\r\n              <Spotlight\r\n                x={this.state.x}\r\n                y={this.state.y}\r\n                radius={this.state.radius}\r\n                color={this.state.color}\r\n                outerStyles={{ zIndex: 0 }}\r\n                responsive\r\n                animSpeed={1000}\r\n                borderColor={this.state.borderColor}\r\n                borderWidth={1}>\r\n                <div style={{\r\n                  position: 'absolute',\r\n                  left: '50%',\r\n                  top: '-50px',\r\n                  transform: 'translate(-50%, -100%)',\r\n                  whiteSpace: 'nowrap'\r\n                }}>\r\n                  <h1 style={{ margin: 0, color: \"white\"}}>{this.state.text}</h1>\r\n                </div>\r\n              </Spotlight>\r\n            </div>\r\n          )}\r\n        </ReactCSSTransitionGroup>\r\n      </div>\r\n    )\r\n  };\r\n};\r\n\r\n","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\components\\game\\windeoResize.js",[],"C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\components\\game\\Welcome.js",[],"C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\components\\game\\GoodBye.js",["209","210"],"import React, { Component } from \"react\";\r\nimport \"../layouts/css/Welcome.css\";\r\n// import Chart from \"./assets/Chart.js\";\r\n\r\nexport default class Goodbye extends React.Component {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  render() {\r\n    const goodbye = (\r\n      <div className='wholescreen'>\r\n        <div className='empty200' />\r\n        <div className='goodbye-label'>Thank you for your participant,</div>\r\n        <div className='goodbye-label'>See you next time.</div>\r\n        <img\r\n          style={{ marginTop: \"2%\" }}\r\n          alt='mangerIcon'\r\n          src={\"logo_detailed.png\"}\r\n          className='avatar'\r\n        />\r\n      </div>\r\n    );\r\n    return goodbye;\r\n  }\r\n}\r\n","C:\\Asaf\\2.Work\\React\\mernTest\\client\\src\\localStorage.js.js",[],{"ruleId":"211","replacedBy":"212"},{"ruleId":"213","replacedBy":"214"},{"ruleId":"215","severity":1,"message":"216","line":5,"column":10,"nodeType":"217","messageId":"218","endLine":5,"endColumn":19},{"ruleId":"215","severity":1,"message":"219","line":5,"column":21,"nodeType":"217","messageId":"218","endLine":5,"endColumn":30},{"ruleId":"215","severity":1,"message":"220","line":4,"column":10,"nodeType":"217","messageId":"218","endLine":4,"endColumn":18},{"ruleId":"215","severity":1,"message":"221","line":1,"column":37,"nodeType":"217","messageId":"218","endLine":1,"endColumn":46},{"ruleId":"215","severity":1,"message":"222","line":5,"column":10,"nodeType":"217","messageId":"218","endLine":5,"endColumn":21},{"ruleId":"215","severity":1,"message":"216","line":6,"column":10,"nodeType":"217","messageId":"218","endLine":6,"endColumn":19},{"ruleId":"215","severity":1,"message":"223","line":2,"column":21,"nodeType":"217","messageId":"218","endLine":2,"endColumn":27},{"ruleId":"215","severity":1,"message":"224","line":1,"column":17,"nodeType":"217","messageId":"218","endLine":1,"endColumn":25},{"ruleId":"215","severity":1,"message":"225","line":5,"column":10,"nodeType":"217","messageId":"218","endLine":5,"endColumn":18},{"ruleId":"226","severity":1,"message":"227","line":19,"column":9,"nodeType":"228","endLine":19,"endColumn":58},{"ruleId":"226","severity":1,"message":"227","line":21,"column":9,"nodeType":"228","endLine":21,"endColumn":54},{"ruleId":"215","severity":1,"message":"229","line":2,"column":2,"nodeType":"217","messageId":"218","endLine":2,"endColumn":17},{"ruleId":"215","severity":1,"message":"224","line":1,"column":17,"nodeType":"217","messageId":"218","endLine":1,"endColumn":25},{"ruleId":"215","severity":1,"message":"230","line":4,"column":10,"nodeType":"217","messageId":"218","endLine":4,"endColumn":15},{"ruleId":"215","severity":1,"message":"231","line":14,"column":8,"nodeType":"217","messageId":"218","endLine":14,"endColumn":15},{"ruleId":"215","severity":1,"message":"229","line":1,"column":10,"nodeType":"217","messageId":"218","endLine":1,"endColumn":25},{"ruleId":"215","severity":1,"message":"232","line":1,"column":41,"nodeType":"217","messageId":"218","endLine":1,"endColumn":54},{"ruleId":"215","severity":1,"message":"233","line":54,"column":17,"nodeType":"217","messageId":"218","endLine":54,"endColumn":22},{"ruleId":"234","severity":1,"message":"235","line":68,"column":38,"nodeType":"236","messageId":"237","endLine":68,"endColumn":40},{"ruleId":"234","severity":1,"message":"235","line":153,"column":19,"nodeType":"236","messageId":"237","endLine":153,"endColumn":21},{"ruleId":"234","severity":1,"message":"235","line":19,"column":21,"nodeType":"236","messageId":"237","endLine":19,"endColumn":23},{"ruleId":"234","severity":1,"message":"235","line":80,"column":38,"nodeType":"236","messageId":"237","endLine":80,"endColumn":40},{"ruleId":"234","severity":1,"message":"235","line":82,"column":38,"nodeType":"236","messageId":"237","endLine":82,"endColumn":40},{"ruleId":"215","severity":1,"message":"224","line":1,"column":17,"nodeType":"217","messageId":"218","endLine":1,"endColumn":25},{"ruleId":"215","severity":1,"message":"238","line":1,"column":27,"nodeType":"217","messageId":"218","endLine":1,"endColumn":35},{"ruleId":"215","severity":1,"message":"221","line":1,"column":37,"nodeType":"217","messageId":"218","endLine":1,"endColumn":46},{"ruleId":"215","severity":1,"message":"239","line":4,"column":17,"nodeType":"217","messageId":"218","endLine":4,"endColumn":26},{"ruleId":"215","severity":1,"message":"238","line":4,"column":28,"nodeType":"217","messageId":"218","endLine":4,"endColumn":36},{"ruleId":"215","severity":1,"message":"221","line":4,"column":38,"nodeType":"217","messageId":"218","endLine":4,"endColumn":47},{"ruleId":"215","severity":1,"message":"240","line":6,"column":10,"nodeType":"217","messageId":"218","endLine":6,"endColumn":17},{"ruleId":"241","severity":1,"message":"242","line":113,"column":7,"nodeType":"243","endLine":113,"endColumn":17},{"ruleId":"215","severity":1,"message":"232","line":2,"column":3,"nodeType":"217","messageId":"218","endLine":2,"endColumn":16},{"ruleId":"244","severity":1,"message":"245","line":52,"column":3,"nodeType":"246","messageId":"237","endLine":56,"endColumn":4},{"ruleId":"215","severity":1,"message":"239","line":1,"column":17,"nodeType":"217","messageId":"218","endLine":1,"endColumn":26},{"ruleId":"247","severity":1,"message":"248","line":6,"column":3,"nodeType":"246","messageId":"249","endLine":8,"endColumn":4},"no-native-reassign",["250"],"no-negated-in-lhs",["251"],"no-unused-vars","'loadState' is defined but never used.","Identifier","unusedVar","'saveState' is defined but never used.","'httpPath' is defined but never used.","'useEffect' is defined but never used.","'DialogTitle' is defined but never used.","'Button' is defined but never used.","'Fragment' is defined but never used.","'Redirect' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'KEYGAME_SUCCESS' is defined but never used.","'login' is defined but never used.","'Goodbye' is defined but never used.","'CHANGE_SCREEN' is defined but never used.","'value' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useState' is defined but never used.","'Component' is defined but never used.","'Textfit' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","no-dupe-class-members","Duplicate name 'componentDidMount'.","MethodDefinition","no-useless-constructor","Useless constructor.","noUselessConstructor","no-global-assign","no-unsafe-negation"]
